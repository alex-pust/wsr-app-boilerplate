import React from 'react';
import PropTypes from 'prop-types';
import {Button as ButtonWSR} from 'wix-style-react';

export interface ButtonProps {
    label: string;
    disabled: boolean;
    ellipsis: boolean;
    fullWidth: boolean;
    prefixIcon?: React.ReactElement<any>;
    priority: 'primary' | 'secondary';
    showTooltip: boolean;
    size: 'tiny' | 'small' | 'medium' | 'large';
    skin: 'standard'
        | 'inverted'
        | 'destructive'
        | 'premium'
        | 'dark'
        | 'light'
        | 'transparent'
        | 'premium-light';
    suffixIcon?: React.ReactElement<any>;
    onClick?: () => void;
}

/**
 * Button is generated by Webcodesk. Replace this comment with a valuable description.
 */
class Button extends React.Component<ButtonProps, any> {

    static propTypes: PropTypes.InferProps<ButtonProps> = {
        /**
         * Label of the button.
         */
        label: PropTypes.string.isRequired,
        /**
         * Applies disabled styles
         */
        disabled: PropTypes.bool,
        /**
         * Should the text get ellipsized with tooltip,
         * or should it get broken into lines when it reaches the end of its container
         */
        ellipsis: PropTypes.bool,
        /**
         * Sets button width to 100%
         */
        fullWidth: PropTypes.bool,
        /**
         * Element based icon (svg, image etc.)
         */
        prefixIcon: PropTypes.node,
        /**
         * Priority of Button content
         */
        priority: PropTypes.oneOf(['primary', 'secondary']),
        /**
         * True by default, set it to false in order to show ellipsis without a tooltip.
         */
        showTooltip: PropTypes.bool,
        /**
         * Size of Button content
         */
        size: PropTypes.oneOf(['tiny', 'small', 'medium', 'large']),
        /**
         * Skins of Button content
         */
        skin: PropTypes.oneOf(['standard', 'inverted', 'destructive', 'premium', 'dark', 'light', 'transparent', 'premium-light']),
        /**
         * Element based icon (svg, image etc.)
         */
        suffixIcon: PropTypes.node,
        /**
         * Triggered when the user clicks on the button
         */
        onClick: PropTypes.func,
    };

    static defaultProps: ButtonProps = {
        label: 'Button',
        disabled: false,
        ellipsis: false,
        fullWidth: false,
        priority: 'primary',
        showTooltip: false,
        size: 'medium',
        skin: 'standard',
    };

    // constructor(props: PrimaryButtonProps) {
    //   super(props);
    // }

    handleButtonClick = (e: React.MouseEvent<HTMLElement>): void => {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        if (this.props.onClick) {
            this.props.onClick();
        }
    };

    render() {
        const {
            label,
            disabled,
            ellipsis,
            fullWidth,
            prefixIcon,
            priority,
            showTooltip,
            size,
            skin,
            suffixIcon
        } = this.props;
        return (
            <ButtonWSR
                disabled={disabled}
                ellipsis={ellipsis}
                fullWidth={fullWidth}
                prefixIcon={prefixIcon}
                showTooltip={showTooltip}
                priority={priority}
                size={size}
                skin={skin}
                suffixIcon={suffixIcon}
                onClick={this.handleButtonClick}
            >
                {label}
            </ButtonWSR>
        );
    }
}

export default Button;
